[{"displayName":"DtAvatar","exportName":"default","description":"","tags":{},"props":[{"name":"id","description":"Id of the avatar content wrapper element","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return getUniqueString(); }"}},{"name":"size","description":"The size of the avatar","type":{"name":"string"},"defaultValue":{"func":false,"value":"'md'"}},{"name":"color","description":"The color of the avatar","type":{"name":"string"},"defaultValue":{"func":false,"value":"'base'"}},{"name":"avatarClass","description":"Used to customize the avatar container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}}],"slots":[{"name":"default","description":"Slot for avatar content"}]},{"displayName":"DtBadge","exportName":"default","description":"","tags":{},"props":[{"name":"text","description":"Text for the badge content","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"color","description":"Color for the badge background","type":{"name":"string"},"defaultValue":{"func":false,"value":"'base'"}}],"slots":[{"name":"default","description":"Slot for badge content, defaults to text prop"}]},{"description":"this mixin provides the methods to automatically trap tab focus within\nthe component this mixin is on, meaning it is not possible to tab out\nof the component without dismissing it. Useful for accessibility reasons\non things like important actionable alerts. Use focusFirstElement to\nfocus on the first tabbable element within your component, and call\nfocusTrappedTabPress every time tab is pressed to trap tab within this\ncomponent. Note that focusFirstElement WILL focus elements with tabindex=\"-1\",\nhowever focusTrappedTabPress will not.","tags":{},"exportName":"default","displayName":"DtBanner","props":[{"name":"titleId","description":"Sets an ID on the title element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the title.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return util.getUniqueString(); }"}},{"name":"contentId","description":"Sets an ID on the content element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the content.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return util.getUniqueString(); }"}},{"name":"title","description":"Title header of the notice. This can be left blank to remove the title from the notice entirely.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"important","description":"Used in scenarios where the message needs to visually dominate the screen.\n This will also change the aria role from status to alertdialog.\nand will modally trap the keyboard focus in the dialog as soon as it displays.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"pinned","description":"Pins the banner to the top of the window and pushes all app content down.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"kind","description":"Severity level of the notice, sets the icon and background","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"closeButtonProps","description":"Props for the notice close button.","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"hideClose","description":"Hides the close button from the notice","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"events":[{"name":"close","description":"Close button click event"}],"slots":[{"name":"icon","description":"Use a custom icon"},{"name":"titleOverride","description":"Allows you to override the title, only use this if you need to override"},{"name":"default","description":"the main textual content of the banner"},{"name":"action","description":"Enter a possible action for the user to take, such as a link to another page"}]},{"displayName":"DtBreadcrumbs","exportName":"default","description":"","tags":{},"props":[{"name":"breadcrumbs","description":"A provided list of breadcrumbs. Overridden by default slot","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"inverted","description":"Passed through to link. If true, applies inverted styles to the link.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"ariaLabel","description":"Descriptive label for the navigation content.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'breadcrumb'"}}],"slots":[{"name":"default","description":"default slot for breadcrumbs content"}]},{"displayName":"DtButton","description":"Base Vue component for Dialtone Buttons.","tags":{"property":[{"title":"property","type":{"name":"Boolean"},"name":"disabled","description":"attribute"},{"title":"property","type":{"name":"String"},"name":"width","description":"attribute"}]},"exportName":"default","props":[{"name":"circle","description":"Whether the button is a circle or not.","tags":{"see":[{"description":"https://dialpad.design/components/button/","title":"see"}]},"values":["true","false"],"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"iconPosition","description":"The position of the icon slot within the button.","tags":{"see":[{"description":"https://dialpad.design/components/button/","title":"see"}]},"values":["left","right","top","bottom"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'left'"}},{"name":"importance","description":"The fill and outline of the button associated with its visual importance.","tags":{"see":[{"description":"https://dialpad.design/components/button/","title":"see"}]},"values":["clear","outlined","primary"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'primary'"}},{"name":"link","description":"Whether the button should be styled as a link or not.","tags":{"see":[{"description":"https://dialpad.design/components/link","title":"see"}]},"values":["true","false"],"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"linkKind","description":"The color of the link and button if the button is styled as a link.","tags":{"see":[{"description":"https://dialpad.design/components/link","title":"see"}]},"values":["danger","dark","default","success","warning"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'default'"}},{"name":"type","description":"The HTML button type attribute.","tags":{"see":[{"description":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button","title":"see"}]},"values":["button","submit","reset"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'button'"}},{"name":"size","description":"The size of the button.","tags":{"see":[{"description":"https://dialpad.design/components/button","title":"see"}]},"values":["xs","sm","md","lg","xl"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'md'"}},{"name":"labelClass","description":"Used to customize the label container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"loading","description":"Whether the button should display a loading animation or not.","tags":{"see":[{"description":"https://dialpad.design/components/button","title":"see"}]},"values":["true","false"],"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"kind","description":"The color of the button.","tags":{"see":[{"description":"https://dialpad.design/components/button","title":"see"}]},"values":["default","danger","inverted"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'default'"}},{"name":"assertiveOnFocus","description":"Determines whether a screenreader reads live updates of\nthe button content to the user while the button\nis in focus. default is to not.","tags":{},"values":["true","false"],"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"active","description":"Determines whether the button should have active styling\ndefault is false.","tags":{},"values":["true","false"],"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"events":[{"name":"click","description":"Native button click event","type":{"names":["PointerEvent | KeyboardEvent"]}},{"name":"focusin","description":"Native button focus in event","type":{"names":["FocusEvent"]}},{"name":"focusout","description":"Native button focus out event","type":{"names":["FocusEvent"]}}],"slots":[{"name":"icon","description":"Button icon"},{"name":"default","description":"Content within button"}]},{"displayName":"DtButtonGroup","exportName":"default","description":"","tags":{},"props":[{"name":"alignment","description":"Alignment of the buttons inside the container","type":{"name":"string"},"defaultValue":{"func":false,"value":"'start'"}}],"slots":[{"name":"default","description":"Default slot for button items"}]},{"description":"This mixin provides common logic shared amongst our groupable inputs.\n\nThis includes the group context and internal data attributes as well as a set common computed\nproperties and watchers. It also includes the group name warning logic.","tags":{},"exportName":"default","displayName":"DtCheckbox","props":[{"name":"label","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A provided label for the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"name","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"The name of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"v-model","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to set the state of the checkable input","tags":{"model":[{"description":"checked","title":"model"}]},"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"description","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Describes the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Disables the input","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"validationState","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"The validation state of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"inputClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the input element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the label container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"descriptionClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the description container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the label container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"descriptionChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the description container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"indeterminate","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Indeterminate State, toggling indeterminate checkbox will uncheck","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"value","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"The value of the input","type":{"name":"string|number|boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"messagesClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the the validation messages component","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the validation messages component","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"showMessages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to hide / show the validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"messages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}}],"events":[{"name":"input","description":"Native input event","type":{"names":["Boolean"]}},{"name":"focusin","description":"Native input focusin event","properties":[{"type":{"names":["FocusEvent"]}}]},{"name":"focusout","description":"Native input focusout event","properties":[{"type":{"names":["FocusEvent"]}}]}],"slots":[{"name":"default","description":"slot for Checkbox Label"},{"name":"description","description":"slot for Checkbox Description"}]},{"description":"This mixin provides a base provide obj and set of components, props, computed, watchers and data attributes that are\ncommonly used in our input group components.","tags":{},"exportName":"default","displayName":"DtCheckboxGroup","props":[{"name":"id","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The id of the input group","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() {\n  return getUniqueString();\n}"}},{"name":"value","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Not supported by this component, please use selectedValues","type":{"name":""},"defaultValue":{"func":false,"value":"null"}},{"name":"name","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The name of the input group","type":{"name":"string"},"required":true},{"name":"legend","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The legend of the input group","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Disables the input group","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"messages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"showMessages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Show validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"legendClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the legend element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the messages container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"legendChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the legend element","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"messagesChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the messages container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"dataQaGroup","description":"A data qa tag for the radio group","type":{"name":"string"},"defaultValue":{"func":false,"value":"'checkbox-group'"}},{"name":"dataQaGroupLegend","description":"A data qa tag for the radio group legend","type":{"name":"string"},"defaultValue":{"func":false,"value":"'checkbox-group-legend'"}},{"name":"dataQaGroupMessages","description":"A data qa tag for the radio group messages","type":{"name":"string"},"defaultValue":{"func":false,"value":"'checkbox-group-messages'"}},{"name":"v-model","description":"A provided list of selected values(s) for the checkbox group","tags":{"model":[{"description":"selectedValues","title":"model"}]},"type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}}],"events":[{"name":"input","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"type":{"names":["Array"]},"description":"Native input event"}],"slots":[{"name":"legend","description":"slot for Input Group Legend"},{"name":"default","description":"slot for Input Group Components"}]},{"displayName":"DtChip","exportName":"default","description":"","tags":{},"props":[{"name":"closeButtonProps","description":"A set of props to be passed into the modal's close button. Requires an 'ariaLabel' property.","type":{"name":"object"},"defaultValue":{"func":false,"value":"{ ariaLabel: 'close' }"}},{"name":"hideClose","description":"Hides the close button on the chip","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"size","description":"The size of the chip.","tags":{"see":[{"description":"https://dialpad.design/components/chip","title":"see"}]},"values":["xs","sm","md"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'md'"}},{"name":"interactive","description":"The interactivity of the chip.\nMakes chip clickable, apply hover/focus/active style, emit keyboard events etc.","tags":{"see":[{"description":"https://dialpad.design/components/chip","title":"see"}]},"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"id","description":"Id to use for the dialog's aria-labelledby.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function () { return getUniqueString(); }"}},{"name":"ariaLabel","description":"Descriptive label for the chip content.\nIf this prop is unset the content in the default slot will be used as an aria-label.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"contentClass","description":"Additional class name for the chip element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}}],"events":[{"name":"close","description":"Native chip close event"},{"name":"click","description":"Native chip click event","type":{"names":["PointerEvent | KeyboardEvent"]}},{"name":"keyup","description":"Native chip key up event","type":{"names":["undefined"]}}],"slots":[{"name":"icon","description":"Chip icon"},{"name":"avatar","description":"Chip avatar"},{"name":"default","description":"Content within chip"}]},{"exportName":"default","displayName":"DtCombobox","description":"","tags":{},"props":[{"name":"listAriaLabel","description":"String to use for the list's aria-label.","type":{"name":"string"},"required":true},{"name":"listId","description":"Sets an ID on the list element of the component. Used by several aria attributes\nas well as when deriving the IDs for each item.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return getUniqueString(); }"}},{"name":"onBeginningOfList","description":"A method that will be called when the selection goes past the beginning of the list.","type":{"name":"func"},"defaultValue":{"func":false,"value":"null"}},{"name":"onEndOfList","description":"A method that will be called when the selection goes past the end of the list.","type":{"name":"func"},"defaultValue":{"func":false,"value":"null"}},{"name":"showList","description":"Determines when to show the list element and also controls the aria-expanded attribute.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"listRenderedOutside","description":"If the list is rendered outside the component, like when using popover as the list wrapper.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"loading","description":"Determines when to show the skeletons and also controls aria-busy attribute.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"emptyStateMessage","description":"Message to show when the list is empty","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}}],"events":[{"name":"select","description":"Select item event","type":{"names":["Number"]}},{"name":"escape","description":"Event fired when pressing escape"},{"name":"highlight","description":"Event fired when the highlight changes","type":{"names":["Number"]}},{"name":"opened","description":"Event fired when list is shown or hidden","type":{"names":["Boolean"]}}],"slots":[{"name":"input","scoped":true,"description":"Slot for the combobox input element","bindings":[{"name":"input-props","title":"binding"}]},{"name":"list","scoped":true,"description":"Slot for the combobox list element","bindings":[{"name":"list-props","title":"binding"},{"name":"opened","title":"binding"},{"name":"clear-highlight-index","title":"binding"},{"name":"is-loading","title":"binding"},{"name":"is-list-empty","title":"binding"}]}]},{"exportName":"default","displayName":"DtDropdown","description":"","tags":{},"props":[{"name":"open","description":"Controls whether the dropdown is shown. Leaving this null will have the dropdown trigger on click by default.\nIf you set this value, the default trigger behavior will be disabled and you can control it as you need.\nSupports .sync modifier","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"padding","description":"Vertical padding size around the list element.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'small'"}},{"name":"modal","description":"Determines modal state, dropdown has a modal overlay preventing interaction with elements\nbelow it, but it is invisible.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"contentWidth","description":"Width configuration for the popover content. When its value is 'anchor',\nthe popover content will have the same width as the anchor.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"maxHeight","description":"Determines maximum height for the popover before overflow.\nPossible units rem|px|em","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"maxWidth","description":"Determines maximum width for the popover before overflow.\nPossible units rem|px|%|em","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"listId","description":"Sets an ID on the list element of the component. Used by several aria attributes\nas well as when deriving the IDs for each item.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return getUniqueString(); }"}},{"name":"navigationType","description":"The type of navigation that this component should support.\n- \"arrow-keys\" for items that are navigated with UP/DOWN keys.\n- \"tab\" for items that are navigated using the TAB key.\n- \"none\" for static items that are not interactive.","type":{"name":"string"},"defaultValue":{"func":false,"value":"LIST_ITEM_NAVIGATION_TYPES.ARROW_KEYS"}},{"name":"fallbackPlacements","description":"If the dropdown does not fit in the direction described by \"placement\",\nit will attempt to change it's direction to the \"fallbackPlacements\".","type":{"name":"array"},"defaultValue":{"func":false,"value":"['auto']"}},{"name":"placement","description":"The direction the dropdown displays relative to the anchor.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'bottom'"}},{"name":"onBeginningOfList","description":"A method that will be called when the selection goes past the beginning of the list.","type":{"name":"func"},"defaultValue":{"func":false,"value":"null"}},{"name":"onEndOfList","description":"A method that will be called when the selection goes past the end of the list.","type":{"name":"func"},"defaultValue":{"func":false,"value":"null"}},{"name":"listClass","description":"Additional class for the wrapper list element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}}],"events":[{"name":"highlight","description":"Event fired when the highlight changes","type":{"names":["Number"]}},{"name":"opened","description":"Emitted when dropdown is shown or hidden","type":{"names":["Boolean | Array"]}},{"name":"update:open"}],"slots":[{"name":"anchor","scoped":true,"description":"Anchor element that activates the dropdown","bindings":[{"name":"ref","title":"binding"}]},{"name":"list","scoped":true,"description":"Slot for the list component","bindings":[{"name":"close","title":"binding"}]}]},{"displayName":"DtEmoji","exportName":"default","description":"","tags":{},"props":[{"name":"code","description":"Supports shortcode ex: :smile: or unicode ex: 😄. Will display the resulting emoji.\nSee https://emojipedia.org/joypixels/ for all supported shortcode/unicode or the docs\nfor setting up custom emojis.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"size","description":"The size of the emoji. Can be any of the svg size utility\nclasses from https://dialpad.design/utilities/svg/size","type":{"name":"string"},"defaultValue":{"func":false,"value":"EMOJI_SIZES.SIZE_20"}},{"name":"imgClass","description":"Additional class name for the emoji img element.\nCan accept all of String, Object, and Array, i.e. has the\nsame api as Vue's built-in handling of the class attribute.","type":{"name":"string|object|array"},"defaultValue":{"func":false,"value":"''"}},{"name":"ariaLabel","description":"Will be read out on a screenreader for this emoji. You must use this prop if you want your emoji to be i18n\nCompatible as Dialtone Vue will not translate it by itself. If you do not set this prop the aria-label will\nbe set to the english description of the emoji. You can retrieve the description for an emoji yourself via the\ngetEmojiJson() function","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}}]},{"exportName":"default","displayName":"DtInput","description":"","tags":{"property":[{"title":"property","type":{"name":"Boolean"},"name":"placeholder","description":"attribute"}]},"props":[{"name":"messagesClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the the validation messages component","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the validation messages component","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"showMessages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to hide / show the validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"messages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"name","description":"Name property of the input element","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"type","description":"Type of the input, one of `text`, `password`, `email`, `number`, `textarea`.\nWhen `textarea` a `<textarea>` element will be rendered instead of an `<input>` element.","type":{"name":"string"},"defaultValue":{"func":false,"value":"INPUT_TYPES.TEXT"}},{"name":"value","description":"Value of the input","type":{"name":"string|number"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","description":"Disables the input","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"label","description":"Label for the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"description","description":"Description for the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"size","description":"Size of the input, one of `xs`, `sm`, `md`, `lg`, `xl`","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"iconSize","description":"Size of the icon. One of `xs`, `sm`, `md`, `lg`, `xl`. If you do not set this the icon will size relative\nto the input size","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"inputClass","description":"Additional class name for the input element.\nCan accept all of String, Object, and Array, i.e. has the\nsame api as Vue's built-in handling of the class attribute.","type":{"name":"string|object|array"},"defaultValue":{"func":false,"value":"''"}},{"name":"currentLength","description":"The current character length that the user has entered into the input.\nThis will only need to be used if you are using validate.length and\nthe string contains abnormal characters.\nFor example, an emoji could take up many characters in the input, but should only count as 1 character.\nIf no number is provided, a built-in length calculation will be used for the length validation.","type":{"name":"number"},"defaultValue":{"func":false,"value":"null"}},{"name":"validate","description":"Validation for the input. Supports maximum length validation with the structure:\n`{ \"length\": {\"description\": string, \"max\": number, \"warn\": number, \"message\": string,\n\"limitMaxLength\": boolean }}`","type":{"name":"object"},"defaultValue":{"func":false,"value":"null"}}],"events":[{"name":"input","description":"Native input event","type":{"names":["String"]}},{"name":"blur","description":"Native input blur event","type":{"names":["FocusEvent"]}},{"name":"clear","description":"Native input clear event"},{"name":"focus","description":"Native input focus event","type":{"names":["FocusEvent"]}},{"name":"focusin","description":"Native input focusin event","type":{"names":["FocusEvent"]}},{"name":"focusout","description":"Native input focusout event","type":{"names":["FocusEvent"]}},{"name":"update:length","description":"Length of the input when currentLength prop is not passed","type":{"names":["Number"]}},{"name":"update:invalid","description":"Result of the input validation","type":{"names":["Boolean"]}}],"slots":[{"name":"labelSlot","description":"slot for label, defaults to label prop"},{"name":"description","description":"slot for description, defaults to description prop"},{"name":"leftIcon"},{"name":"rightIcon"}]},{"description":"This mixin provides common logic shared amongst our groupable inputs.\n\nThis includes the group context and internal data attributes as well as a set common computed\nproperties and watchers. It also includes the group name warning logic.","tags":{},"exportName":"default","displayName":"InputDecorator","props":[{"name":"label","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"A provided label for the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"name","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"The name of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"v-model","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"The value of the input","tags":{"model":[{"description":"value","title":"model"}]},"type":{"name":"string|number|boolean|object"},"defaultValue":{"func":false,"value":"null"}},{"name":"description","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"Describes the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"Disables the input","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"validationState","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"The validation state of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"inputClass","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"Used to customize the input element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelClass","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"Used to customize the label container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"descriptionClass","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"Used to customize the description container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelChildProps","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"A set of props that are passed into the label container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"descriptionChildProps","mixin":{"name":"input","path":"../../../common/mixins/input.js"},"description":"A set of props that are passed into the description container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}}],"events":[{"name":"input","type":{"names":["undefined"]}}],"slots":[{"name":"default","description":"slot for Input Decorator Label"}]},{"description":"This mixin provides a base provide obj and set of components, props, computed, watchers and data attributes that are\ncommonly used in our input group components.","tags":{},"exportName":"default","displayName":"DtInputGroup","props":[{"name":"id","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The id of the input group","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() {\n  return getUniqueString();\n}"}},{"name":"value","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The value of the input group","type":{"name":"string|number|boolean|object"},"defaultValue":{"func":false,"value":"null"}},{"name":"name","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The name of the input group","type":{"name":"string"},"required":true},{"name":"legend","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The legend of the input group","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Disables the input group","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"messages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"showMessages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Show validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"legendClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the legend element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the messages container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"legendChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the legend element","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"messagesChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the messages container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"dataQaGroup","description":"A data qa tag for the input group","type":{"name":"string"},"defaultValue":{"func":false,"value":"'input-group'"}},{"name":"dataQaGroupLegend","description":"A data qa tag for the input group legend","type":{"name":"string"},"defaultValue":{"func":false,"value":"'input-group-legend'"}},{"name":"dataQaGroupMessages","description":"A data qa tag for the input group messages","type":{"name":"string"},"defaultValue":{"func":false,"value":"'input-group-messages'"}}],"events":[{"name":"input","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"type":{"names":["undefined"]},"description":"Native input event"}],"slots":[{"name":"legend","description":"slot for Input Group Legend"},{"name":"default","description":"slot for Input Group Components"}]},{"displayName":"DtKeyboardShortcut","exportName":"default","description":"","tags":{},"props":[{"name":"inverted","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"shortcut","type":{"name":"string"},"required":true},{"name":"screenReaderText","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}}]},{"displayName":"DtLazyShow","exportName":"default","description":"","tags":{},"props":[{"name":"show","description":"Whether the child slot is shown.","type":{"name":"boolean"}},{"name":"transition","description":"A valid Vue enter/leave CSS transition name.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"appear","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"slots":[{"name":"default"}]},{"displayName":"DtLink","description":"","tags":{"property":[{"title":"property","type":{"name":"String"},"name":"href","description":"attribute"},{"title":"property","type":{"name":"String"},"name":"rel","description":"attribute"}]},"exportName":"default","props":[{"name":"kind","description":"Applies the link variant styles","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"},"values":[]}],"events":[{"name":"click","description":"Native click event","type":{"names":["PointerEvent | KeyboardEvent"]}},{"name":"focusin","description":"Native focus in event","type":{"names":["FocusEvent"]}},{"name":"focusout","description":"Native focus out event","type":{"names":["FocusEvent"]}}],"slots":[{"name":"default"}]},{"displayName":"ListItem","exportName":"default","description":"","tags":{},"props":[{"name":"id","description":"Id for the item.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return utils.getUniqueString(); }"}},{"name":"role","description":"String to use for the item's role.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'listitem'"}},{"name":"elementType","description":"The type of element to use for the wrapper.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'li'"}},{"name":"type","description":"The type of child list item to use.","type":{"name":"string"},"defaultValue":{"func":false,"value":"LIST_ITEM_TYPES.DEFAULT"}},{"name":"navigationType","description":"The type of navigation that this component should support.\n- \"arrow-keys\" for items that are navigated with UP/DOWN keys.\n- \"tab\" for items that are navigated using the TAB key.\n- \"none\" for static items that are not interactive.","type":{"name":"string"},"defaultValue":{"func":false,"value":"LIST_ITEM_NAVIGATION_TYPES.NONE"}}],"events":[{"name":"click","description":"Native click event","type":{"names":["PointerEvent | KeyboardEvent"]}},{"name":"keydown","description":"Key down event","type":{"names":["undefined"]}},{"name":"mousemove","description":"Mouse move event","type":{"names":["undefined"]}},{"name":"mouseleave","description":"Mouse leave event","type":{"names":["undefined"]}},{"name":"mousedown","type":{"names":["undefined"]}}],"slots":[{"name":"default","scoped":true,"bindings":[{"name":"name","title":"binding"}]}]},{"displayName":"ListSection","exportName":"default","description":"","tags":{},"props":[{"name":"id","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return utils.getUniqueString(); }"}},{"name":"header","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"separator","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"maxDisplayed","type":{"name":"number"},"defaultValue":{"func":false,"value":"0"}},{"name":"textMore","type":{"name":"string"},"defaultValue":{"func":false,"value":"'Show more'"}},{"name":"textLess","type":{"name":"string"},"defaultValue":{"func":false,"value":"'Show less'"}}],"slots":[{"name":"default"},{"name":"footer"}]},{"description":"Base Vue component for Dialtone Modal.","tags":{},"exportName":"default","displayName":"DtModal","props":[{"name":"closeButtonProps","description":"A set of props to be passed into the modal's close button. Requires an 'ariaLabel' property.","type":{"name":"object"},"required":true},{"name":"copy","description":"Body text to display as the modal's main content.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"describedById","description":"Id to use for the dialog's aria-describedby.\nRecommended only if the dialog content itself isn't enough to give full context,\nas screen readers should recite the dialog contents by default before any aria-description.","type":{"name":"string"}},{"name":"labelledById","description":"Id to use for the dialog's aria-labelledby.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function () { return getUniqueString(); }"}},{"name":"show","description":"Whether the modal should be shown.  Parent component can sync on this value to control the modal's visibility.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"title","description":"Title text to display in the modal header.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"kind","description":"The theme of the modal.","tags":{},"values":["default or danger\nkind - default or danger (https://dialpad.design/components/modal/)"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'default'"}},{"name":"size","description":"The size of the modal.","tags":{},"values":["default or full\nsize - default or full (https://dialpad.design/components/modal/)"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'default'"}},{"name":"modalClass","description":"Additional class name for the root modal element.\nCan accept all of String, Object, and Array, i.e. has the\nsame api as Vue's built-in handling of the class attribute.","type":{"name":"string|object|array"},"defaultValue":{"func":false,"value":"''"}},{"name":"dialogClass","description":"Additional class name for the dialog element within the modal.\nCan accept all of String, Object, and Array, i.e. has the\nsame api as Vue's built-in handling of the class attribute.","type":{"name":"string|object|array"},"defaultValue":{"func":false,"value":"''"}},{"name":"hideClose","description":"Hides the close button on the modal","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"fixedHeaderFooter","description":"Scrollable modal that allows scroll the modal content keeping the header and footer fixed","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}}],"events":[{"name":"update:show","description":"The modal will emit a \"false\" boolean value for this event when the user performs a modal-closing action.\nParent components can sync on this value to create a 2-way binding to control modal visibility.","type":{"names":["Boolean"]}}],"slots":[{"name":"header","description":"Slot for dialog header section, taking the place of any \"title\" text prop"},{"name":"default","description":"Default slot for dialog body section, taking the place of any \"copy\" text prop"},{"name":"footer","description":"Slot for dialog footer content, often containing cancel and confirm buttons."}]},{"displayName":"DtNotice","exportName":"default","description":"","tags":{},"props":[{"name":"titleId","description":"Sets an ID on the title element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the title.","type":{"name":"string"},"defaultValue":{"func":false,"value":"undefined"}},{"name":"contentId","description":"Sets an ID on the content element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the content.","type":{"name":"string"},"defaultValue":{"func":false,"value":"undefined"}},{"name":"title","description":"Title header of the notice. This can be left blank to remove the title from the notice entirely.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"role","description":"Provides a role for the notice. 'status' is used to communicate a message. 'alert' is used to communicate an\nimportant message that does not contain any interactive elements. 'alertdialog' is used to communicate an\nimportant message that does contain interactive elements.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'status'"}},{"name":"important","description":"Used in scenarios where the message needs to visually dominate the screen.\nThis will also change the aria role from status to alert.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"kind","description":"Severity level of the notice, sets the icon and background","type":{"name":"string"},"defaultValue":{"func":false,"value":"'base'"}},{"name":"closeButtonProps","description":"Props for the notice close button.","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"hideClose","description":"Hides the close button from the notice","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"events":[{"name":"close","description":"Close button click event"}],"slots":[{"name":"icon","description":"Use a custom icon"},{"name":"titleOverride","description":"Allows you to override the title, only use this if you need"},{"name":"default","description":"the main textual content of the notice"},{"name":"action","description":"Enter a possible action for the user to take, such as a link to another page"}]},{"description":"this mixin provides the methods to automatically trap tab focus within\nthe component this mixin is on, meaning it is not possible to tab out\nof the component without dismissing it. Useful for accessibility reasons\non things like important actionable alerts. Use focusFirstElement to\nfocus on the first tabbable element within your component, and call\nfocusTrappedTabPress every time tab is pressed to trap tab within this\ncomponent. Note that focusFirstElement WILL focus elements with tabindex=\"-1\",\nhowever focusTrappedTabPress will not.","tags":{},"exportName":"default","displayName":"DtPopover","props":[{"name":"open","description":"Controls whether the popover is shown. Leaving this null will have the popover trigger on click by default.\nIf you set this value, the default trigger behavior will be disabled and you can control it as you need.\nSupports .sync modifier","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"elementType","description":"Element type (tag name) of the root element of the component.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'div'"}},{"name":"transition","description":"Named transition when the content display is toggled.","tags":{"see":[{"description":"DtLazyShow","title":"see"}]},"type":{"name":"string"},"defaultValue":{"func":false,"value":"'fade'"}},{"name":"role","description":"ARIA role for the content of the popover. Defaults to \"dialog\".","tags":{"see":[{"description":"https://www.w3.org/TR/wai-aria/#aria-haspopup","title":"see"}]},"type":{"name":"string"},"defaultValue":{"func":false,"value":"'dialog'"}},{"name":"ariaLabelledby","description":"ID of the element that serves as the label for the popover content.\nDefaults to the \"anchor\" element; this exists to provide a different\nID of the label element if, for example, the anchor slot contains\nother items that do not serve as a label. You should provide this\nor ariaLabel, but not both.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"ariaLabel","description":"Descriptive label for the popover content. You should provide this\nor ariaLabelledby, but not both.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"}},{"name":"closeButtonProps","description":"A set of props to be passed into the popover's header close button.\nRequires an 'ariaLabel' property, when the header popover is visible","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"padding","description":"Padding size class for the popover content.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'large'"}},{"name":"contentClass","description":"Additional class name for the content wrapper element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"contentWidth","description":"Width configuration for the popover content. When its value is 'anchor',\nthe popover content will have the same width as the anchor.","type":{"name":"string"},"defaultValue":{"func":false,"value":"null"},"values":["anchor"]},{"name":"contentTabindex","description":"Tabindex value for the content. Passing null, no tabindex attribute will be set.","type":{"name":"Number || null"},"defaultValue":{"func":false,"value":"-1"}},{"name":"externalAnchor","description":"External anchor id to use in those cases the anchor can't be provided via the slot.\nFor instance, using the combobox's input as the anchor for the popover.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"id","description":"The id of the tooltip","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return getUniqueString(); }"}},{"name":"offset","description":"Displaces the content box from its anchor element\n by the specified number of pixels.","type":{"name":"array"},"defaultValue":{"func":false,"value":"[0, 4]"}},{"name":"hideOnClick","description":"Determines if the popover hides upon clicking the\nanchor or outside of the content box.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"modal","description":"Determines modal state. If enabled popover has a modal overlay\npreventing interaction with elements below it, but it is invisible.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"fallbackPlacements","description":"If the popover does not fit in the direction described by \"placement\",\nit will attempt to change it's direction to the \"fallbackPlacements\".","type":{"name":"array"},"defaultValue":{"func":false,"value":"['auto']"}},{"name":"placement","description":"The direction the popover displays relative to the anchor.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'bottom-end'"}},{"name":"tether","description":"If set to false the dialog will display over top of the anchor when there is insufficient space.\nIf set to true it will never move from its position relative to the anchor and will clip instead.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"sticky","description":"If the popover sticks to the anchor. This is usually not needed, but can be needed\nif the reference element's position is animating, or to automatically update the popover\nposition in those cases the DOM layout changes the reference element's position.\n`true` enables it, `reference` only checks the \"reference\" rect for changes and `popper` only\nchecks the \"popper\" rect for changes.","type":{"name":"boolean|string"},"defaultValue":{"func":false,"value":"false"}},{"name":"maxHeight","description":"Determines maximum height for the popover before overflow.\nPossible units rem|px|em","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"maxWidth","description":"Determines maximum width for the popover before overflow.\nPossible units rem|px|%|em","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"showCloseButton","description":"Determines visibility for close button","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"headerClass","description":"Additional class name for the header content wrapper element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"footerClass","description":"Additional class name for the footer content wrapper element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"dialogClass","description":"Additional class name for the dialog element.","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"initialFocusElement","description":"The element that is focused when the popover is opened. This can be an\nHTMLElement within the popover, a string starting with '#' which will\nfind the element by ID. 'first' which will automatically focus\nthe first element, or 'dialog' which will focus the dialog window itself.\nIf the dialog is modal this prop cannot be 'none'.","type":{"name":"string|HTMLElement"},"defaultValue":{"func":false,"value":"'none'"}},{"name":"openWithArrowKeys","description":"If the popover should open pressing up or down arrow key on the anchor element.\nThis can be set when not passing open prop.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"events":[{"name":"opened","description":"Emitted when popover is shown or hidden","type":{"names":["Boolean | Array"]},"properties":[{"type":{"names":["undefined"]},"name":"<anonymous1>"}]},{"name":"update:open","type":{"names":["undefined"]}}],"slots":[{"name":"anchor","scoped":true,"description":"Anchor element that activates the popover. Usually a button.","bindings":[{"name":"attrs","title":"binding"}]},{"name":"headerContent","scoped":true,"description":"Slot for popover header content","bindings":[{"name":"close","title":"binding"}]},{"name":"content","scoped":true,"description":"content that is displayed in the popover when it is open.","bindings":[{"name":"close","title":"binding"}]},{"name":"footerContent","scoped":true,"bindings":[{"name":"close","title":"binding"}]}]},{"description":"This mixin provides common logic shared amongst our groupable inputs.\n\nThis includes the group context and internal data attributes as well as a set common computed\nproperties and watchers. It also includes the group name warning logic.","tags":{},"exportName":"default","displayName":"DtRadio","props":[{"name":"label","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A provided label for the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"name","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"The name of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"v-model","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to set the state of the checkable input","tags":{"model":[{"description":"checked","title":"model"}]},"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"description","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Describes the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Disables the input","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"validationState","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"The validation state of the input","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"inputClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the input element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the label container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"descriptionClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the description container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the label container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"descriptionChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the description container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"indeterminate","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Indeterminate State, toggling indeterminate checkbox will uncheck","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"value","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A provided value for the radio","type":{"name":"string|number"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the the validation messages component","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the validation messages component","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"showMessages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to hide / show the validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"messages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}}],"events":[{"name":"input","description":"Native input event","type":{"names":["String | Number"]}},{"name":"focusin","description":"Native input focusin event","properties":[{"type":{"names":["FocusEvent"]}}]},{"name":"focusout","description":"Native input focusout event","properties":[{"type":{"names":["FocusEvent"]}}]}],"slots":[{"name":"default","description":"slot for Radio Label"},{"name":"description","description":"slot for Radio Description"}]},{"description":"This mixin provides a base provide obj and set of components, props, computed, watchers and data attributes that are\ncommonly used in our input group components.","tags":{},"exportName":"default","displayName":"DtRadioGroup","props":[{"name":"id","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The id of the input group","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() {\n  return getUniqueString();\n}"}},{"name":"value","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The value of the input group","type":{"name":"string|number|boolean|object"},"defaultValue":{"func":false,"value":"null"}},{"name":"name","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The name of the input group","type":{"name":"string"},"required":true},{"name":"legend","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"The legend of the input group","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"disabled","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Disables the input group","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"messages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"showMessages","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Show validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"legendClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the legend element","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesClass","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"Used to customize the messages container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"legendChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the legend element","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"messagesChildProps","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"description":"A set of props that are passed into the messages container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"dataQaGroup","description":"A data qa tag for the radio group","type":{"name":"string"},"defaultValue":{"func":false,"value":"'radio-group'"}},{"name":"dataQaGroupLegend","description":"A data qa tag for the radio group legend","type":{"name":"string"},"defaultValue":{"func":false,"value":"'radio-group-legend'"}},{"name":"dataQaGroupMessages","description":"A data qa tag for the radio group messages","type":{"name":"string"},"defaultValue":{"func":false,"value":"'radio-group-messages'"}},{"name":"v-model","description":"A provided value for the radio group","tags":{"model":[{"description":"value","title":"model"}]},"type":{"name":"string|number"},"defaultValue":{"func":false,"value":"''"}}],"events":[{"name":"input","mixin":{"name":"input_group","path":"../../common/mixins/input_group.js"},"type":{"names":["String | Number"]},"description":"Native input event"}],"slots":[{"name":"legend","description":"slot for Input Group Legend"},{"name":"default","description":"slot for Input Group Components"}]},{"exportName":"default","displayName":"DtSelectMenu","description":"","tags":{"property":[{"title":"property","type":{"name":"Boolean"},"name":"disabled","description":"attribute"},{"title":"property","type":{"name":"String"},"name":"name","description":"attribute"},{"title":"property","type":{"name":"String"},"name":"value","description":"attribute"}]},"props":[{"name":"messagesClass","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to customize the the validation messages component","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"messagesChildProps","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"A set of props that are passed into the validation messages component","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"showMessages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Used to hide / show the validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"messages","mixin":{"name":"input","path":"../../common/mixins/input.js"},"description":"Validation messages","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"label","description":"Label for the select","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"description","description":"Description for the select","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"options","description":"Select Menu Options, overridden by default slot. Each option has the following structure:\n`{ index: number (optional), value: number || string (required), label: string (required) }`","tags":{"params":[{"title":"param","type":{"name":"Object[]"},"name":"options","description":"Optional - A list that can be used to create a list of select menu options"},{"title":"param","type":{"name":"number"},"name":"options","description":"[].index - Optional - The index of the option"},{"title":"param","type":{"name":"union","elements":[{"name":"number"},{"name":"string"}]},"name":"options","description":"[].value - Required - The option value"},{"title":"param","type":{"name":"string"},"name":"options","description":"[].label - Required - The option Label"}]},"type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"size","description":"Controls the size of the select","tags":{"see":[{"description":"https://dialpad.design/components/select","title":"see"}]},"values":["xs","s","md","lg","xl"],"type":{"name":"string"},"defaultValue":{"func":false,"value":"'md'"}},{"name":"labelClass","description":"Used to customize the label container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"descriptionClass","description":"Used to customize the description container","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"selectClass","description":"Used to customize the select","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"optionClass","description":"Used to customize each option, should options be provided via prop","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelChildProps","description":"A set of props that are passed into the label container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"descriptionChildProps","description":"A set of props that are passed into the description container","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"optionChildProps","description":"A set of props that are passed into each option, should options be provided via prop","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"disabled","description":"Disabled state of the select","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}}],"events":[{"name":"input","description":"Native input event","type":{"names":["String | Number"]}},{"name":"change","description":"Native change event","type":{"names":["String | Number"]}}],"slots":[{"name":"label","description":"Slot for label, defaults to label prop"},{"name":"description","description":"Slot for description, defaults to description prop"},{"name":"default","description":"Slot for select menu options, defaults to options prop"}]},{"displayName":"DtSkeleton","exportName":"default","description":"","tags":{},"props":[{"name":"paragraphOption","type":{"name":"object|boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"listItemOption","type":{"name":"object|boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"textOption","type":{"name":"object"},"defaultValue":{"func":false,"value":"null"}},{"name":"shapeOption","type":{"name":"object|boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"animationDuration","type":{"name":"number"},"defaultValue":{"func":false,"value":"-1"}},{"name":"ariaLabel","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"animate","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}},{"name":"offset","type":{"name":"number"},"defaultValue":{"func":false,"value":"1"}}]},{"displayName":"DtToast","exportName":"default","description":"","tags":{},"props":[{"name":"titleId","description":"Sets an ID on the title element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the title.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return util.getUniqueString(); }"}},{"name":"contentId","description":"Sets an ID on the content element of the component. Useful for aria-describedby\nor aria-labelledby or any other reason you may need an id to refer to the content.","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return util.getUniqueString(); }"}},{"name":"title","description":"Title header of the toast. This can be left blank to remove the title from the toast entirely.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"message","description":"Message of the toast. Overridden by default slot.","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"role","description":"Provides a role for the toast. 'status' is used by default to communicate a message. 'alert' is used to\ncommunicate an important message like an error that does not contain any interactive elements.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'status'"}},{"name":"kind","description":"Severity level of the toast, sets the icon and background","type":{"name":"string"},"defaultValue":{"func":false,"value":"'base'"}},{"name":"important","description":"Used in scenarios where the message needs to visually dominate the screen.","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"show","description":"Controls whether the toast is shown. If a valid duration is provided, the toast will disappear\nafter reaching the duration time, so it's convenient to use `.sync` modifier with this prop to update\nthe data in your component.\nSupports .sync modifier","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"closeButtonProps","description":"Props for the toast close button.","type":{"name":"object"},"defaultValue":{"func":false,"value":""}},{"name":"hideClose","description":"Hides the close button from the toast","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"duration","description":"The duration in ms the toast will display before disappearing.\nThe toast won't disappear if the duration is not provided.\nIf it's provided, it should be equal to or greater than 6000.","type":{"name":"number"},"defaultValue":{"func":false,"value":"null"}}],"events":[{"name":"close","description":"Close button click event","type":{"names":["undefined"]}},{"name":"update:show","type":{"names":["undefined"]}}],"slots":[{"name":"icon","description":"Use a custom icon"},{"name":"titleOverride","description":"Allows you to override the title, only use this if you need to override"},{"name":"default","description":"the main textual content of the toast"},{"name":"action","description":"Enter a possible action for the user to take, such as a link to another page"}]},{"displayName":"DtToggle","exportName":"default","description":"","tags":{},"props":[{"name":"id","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return utils.getUniqueString(); }"}},{"name":"disabled","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"v-model","tags":{"model":[{"description":"checked","title":"model"}]},"type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"labelClass","type":{"name":"string|array|object"},"defaultValue":{"func":false,"value":"''"}},{"name":"labelChildProps","type":{"name":"object"},"defaultValue":{"func":false,"value":""}}],"events":[{"name":"change","description":"Toggle change event","type":{"names":["Boolean"]}}],"slots":[{"name":"default"}]},{"displayName":"Tooltip","exportName":"default","description":"","tags":{},"props":[{"name":"id","description":"The id of the tooltip","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() { return getUniqueString(); }"}},{"name":"fallbackPlacements","description":"If the popover does not fit in the direction described by \"placement\",\nit will attempt to change it's direction to the \"fallbackPlacements\"\nif defined, otherwise it will automatically position to a new location\nas it sees best fit.","type":{"name":"array"},"defaultValue":{"func":false,"value":"['auto']"}},{"name":"inverted","description":"Add inverted class","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"false"}},{"name":"offset","description":"Displaces the tooltip from its reference element\n by the specified number of pixels.","type":{"name":"array"},"defaultValue":{"func":false,"value":"[0, -4]"}},{"name":"placement","description":"The direction the popover displays relative to the anchor.","type":{"name":"string"},"defaultValue":{"func":false,"value":"'top'"},"values":[]},{"name":"sticky","description":"If the tooltip sticks to the anchor. This is usually not needed, but can be needed\nif the reference element's position is animating, or to automatically update the popover\nposition in those cases the DOM layout changes the reference element's position.\n`true` enables it, `reference` only checks the \"reference\" rect for changes and `popper` only\nchecks the \"popper\" rect for changes.","type":{"name":"boolean|string"},"defaultValue":{"func":false,"value":"false"}},{"name":"contentClass","description":"Additional css classes for the tooltip content element.\nCan accept all of String, Object, and Array, i.e. has the\nsame api as Vue's built-in handling of the class attribute.","type":{"name":"string|object|array"},"defaultValue":{"func":false,"value":"''"}},{"name":"message","description":"A provided message for the tooltip content","type":{"name":"string"},"defaultValue":{"func":false,"value":"''"}},{"name":"show","description":"Controls whether the tooltip is shown. Leaving this null will have the tooltip trigger on mouseover by default.\nIf you set this value, the default mouseover behavior will be disabled and you can control it as you need.\nSupports .sync modifier","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"null"}},{"name":"transition","description":"Named transition when the content display is toggled.","tags":{"see":[{"description":"DtLazyShow","title":"see"}]},"type":{"name":"string"},"defaultValue":{"func":false,"value":"'fade'"}}],"events":[{"name":"shown","description":"Emitted when tooltip is shown or hidden","type":{"names":["Boolean"]}},{"name":"update:show","type":{"names":["undefined"]}}],"slots":[{"name":"anchor"},{"name":"default"}]},{"displayName":"DtValidationMessages","exportName":"default","description":"","tags":{},"props":[{"name":"id","description":"The id of the validation message","type":{"name":"string"},"defaultValue":{"func":true,"value":"function() {\n  return getUniqueString();\n}"}},{"name":"validationMessages","description":"Array of validation messages. Each message has the following structure:\n`{ message: \"Some informative message\", type: \"error|warning|success\"}`","type":{"name":"array"},"defaultValue":{"func":false,"value":"[]"}},{"name":"showMessages","description":"Show Validation messages","type":{"name":"boolean"},"defaultValue":{"func":false,"value":"true"}}]}]